{"name":"vim-signify","tagline":"A tutorial.","body":"vim-signify\r\n-----------\r\n\r\nOr just: __sy__\r\n\r\nSy shows all added, deleted and modified lines since the last commit via Vim its\r\nsign column. It __supports several version control systems__.\r\n\r\nIt's __fast__, __highly configurable__ and __well documented__.\r\n\r\nFeatures:\r\n\r\n- supports git, mercurial, darcs, bazaar, subversion, cvs, rcs\r\n- quick jumping between changed lines\r\n- apart from signs there is also optional line highlighting\r\n- fully configurable through global variables (options and mappings)\r\n- optional preserving of signs from other plugins\r\n- you can toggle the plugin per buffer\r\n- skip certain filetypes and filenames\r\n- good documentation\r\n\r\n- quick developer response! :-)\r\n\r\n![Example:signify in action](https://github.com/mhinz/vim-signify/raw/master/signify.png)\r\n\r\nLimits exist only in your mind!\r\n\r\nFeedback, please!\r\n-----------------\r\n\r\nIf you use any of my plugins, star it on github. This is a great way of getting\r\nfeedback! Same for issues or feature requests.\r\n\r\nThank you for flying mhi airlines. Get the Vim on!\r\n\r\nWhat about vim-gitgutter?\r\n-------------------------\r\n\r\nTo be honest, I don't understand why people always compare plugins like Sy to\r\nvim-gitgutter. I understand that it is by far the most known one, but primarily\r\nbecause it was featured on the Hacker News frontpage.\r\n\r\nDon't get me wrong, I don't intend to badmouth gitgutter, I even contributed to\r\nit once. (Granted, it was only a small fix.) And I'm glad about everyone\r\ncontributing to the Vim community, but there are two important facts one should\r\nconsider:\r\n\r\n1. There were other plugins providing the same functionality as gitgutter years\r\n   before its creation.\r\n\r\n1. Sy provides a superset of gitgutter.\r\n\r\nSo here is the short answer: The main difference is Sy its support for version\r\ncontrol systems other than git. Moreover, two of its design goals are speed and\r\nhigh configurability.\r\n\r\nSign explanation\r\n----------------\r\n\r\n`+`\r\n\r\nA new line was added. The sign is shown on the same line as the new line.\r\n\r\n`_`\r\n\r\nA line was deleted. The sign is shown on the line above the deleted line. Special case: The first line was deleted. In this case the sign is shown on the same line.\r\n\r\n`!`\r\n\r\nA line was changed. Something was changed, but the amount of lines stayed the same. The sign is shown on the same line.\r\n\r\n`!_`\r\n\r\nA line was changed and one or more of the lines below were deleted. A combination of **!** and **_**. The sign is shown on the same line.\r\n\r\nLonger introduction\r\n-------------------\r\n\r\n#### supports several version control systems\r\n\r\nThis plugin is based on the diffing features of the supported version control\r\nsystems. Since not all VCS support the same options, sometimes we have to fall\r\nback to the 'diff' executable.\r\n\r\nCurrent the following VCS are supported:\r\n\r\n- git\r\n- mercurial (hg)\r\n- bazaar (bzr)\r\n- darcs\r\n- subversion (svn)\r\n- cvs\r\n- rcs\r\n\r\n#### quick jumping between changed lines\r\n\r\nThere are mappings for jumping forth and back between changed lines (so-called\r\nhunks). The following example shows the default mappings and how to change them:\r\n\r\n```vim\r\nlet g:signify_mapping_next_hunk = '<leader>gj'\r\nlet g:signify_mapping_prev_hunk = '<leader>gk'\r\n```\r\n\r\nNote: In case you don't know about the mapleader, have a look at `:h mapleader`.\r\nThe default is the '\\' button.\r\n\r\nFollowing Vim conventions you can also use __]c__ and __[c__.\r\n\r\n#### apart from signs there is also optional line highlighting\r\n\r\nSy shows you signs for changed lines. Moveover, you can enable highlighting of\r\nthe concerned lines:\r\n\r\n```vim\r\nlet g:signify_mapping_toggle_highlight = '<leader>gh'\r\n```\r\n\r\nYou can also change the highlighting classes for these lines. The defaults are:\r\n\r\n```vim\r\nlet g:signify_line_color_add    = 'DiffAdd'\r\nlet g:signify_line_color_delete = 'DiffDelete'\r\nlet g:signify_line_color_change = 'DiffChange'\r\n```\r\n\r\n#### you can toggle the plugin per buffer\r\n\r\nIn case you want to disable the plugin for the current buffer, you can toggle\r\nit:\r\n\r\n```vim\r\nlet g:signify_mapping_toggle = '<leader>gt'\r\n```\r\n\r\n#### skip certain filetypes and filenames\r\n\r\nIf you want to disable Sy for certain kinds of filename or file types,\r\nyou explicitely have to create \"skip dicts\":\r\n\r\nExample:\r\n\r\n```vim\r\nlet g:signify_skip_filetype = { 'vim': 1, 'c': 1 }\r\nlet g:signify_skip_filename = { '/home/user/.vimrc': 1 }\r\n```\r\n\r\n__NOTE__: Filenames have to be absolute paths!\r\n\r\n#### good documentation\r\n\r\nYou should know by now!\r\n\r\nInstallation\r\n------------\r\n\r\nIf you have no preferred installation method, I suggest using tpope's pathogen:\r\n\r\n1. git clone https://github.com/tpope/vim-pathogen ~/.vim/bundle/vim-pathogen\r\n1. mkdir -p ~/.vim/autoload && cd ~/.vim/autoload\r\n1. ln -s ../bundle/vim-pathogen/autoload/pathogen.vim\r\n\r\nAfterwards installing Sy is as easy as pie:\r\n\r\n2. git clone https://github.com/mhinz/vim-signify ~/.vim/bundle/vim-signify\r\n2. start Vim\r\n2. :Helptags\r\n2. :h signify\r\n\r\nDocumentation\r\n-------------\r\n\r\n`:h signify`\r\n\r\nConfiguration\r\n-------------\r\n\r\nFor more info: `:h signify-options`\r\n\r\n__NOTE__: The shown assignments are only examples, not defaults.\r\n\r\n```vim\r\nlet g:signify_vcs_list = [ 'git', 'hg' ]\r\n\r\nlet g:signify_mapping_next_hunk = '<leader>gj'\r\nlet g:signify_mapping_prev_hunk = '<leader>gk'\r\n\r\nlet g:signify_mapping_toggle_highlight = '<leader>gh'\r\nlet g:signify_mapping_toggle           = '<leader>gt'\r\n\r\nlet g:signify_skip_filetype = { 'vim': 1, 'c': 1 }\r\nlet g:signify_skip_filename = { '/home/user/.vimrc': 1 }\r\n\r\nlet g:signify_sign_overwrite = 1\r\n\r\nlet g:signify_update_on_bufenter = 1\r\n\r\nlet g:signify_line_highlight = 1\r\n\r\nlet g:signify_sign_add               = '+'\r\nlet g:signify_sign_delete            = '-'\r\nlet g:signify_sign_change            = '*'\r\nlet g:signify_sign_delete_first_line = '‾'\r\n\r\nlet g:signify_sign_color_guifg_add      = '#00ff00'\r\nlet g:signify_sign_color_guifg_delete   = '#ff0000'\r\nlet g:signify_sign_color_guifg_change   = '#ffff00'\r\nlet g:signify_sign_color_guibg          = '#111111'\r\n\r\nlet g:signify_sign_color_ctermfg_add    = 2\r\nlet g:signify_sign_color_ctermfg_delete = 1\r\nlet g:signify_sign_color_ctermfg_change = 3\r\nlet g:signify_sign_color_ctermbg        = 0\r\n\r\nlet g:signify_sign_color_group_add    = 'MyAdd'\r\nlet g:signify_sign_color_group_delete = 'MyDelete'\r\nlet g:signify_sign_color_group_change = 'MyChange'\r\n\r\nlet g:signify_line_color_add    = 'DiffAdd'\r\nlet g:signify_line_color_delete = 'DiffDelete'\r\nlet g:signify_line_color_change = 'DiffChange'\r\n\r\nlet g:signify_cursorhold_normal = 1\r\nlet g:signify_cursorhold_insert = 1\r\n```\r\n\r\nAuthor\r\n------\r\n\r\nMarco Hinz `<mh.codebro@gmail.com>`\r\n\r\nLicense\r\n-------\r\n\r\nCopyright © Marco Hinz. Distributed under the same terms as Vim itself. See\r\n`:help license`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}